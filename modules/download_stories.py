import re

from telethon import events
from utils.misc import modules_help
from telethon.tl.functions.stories import GetStoriesByIDRequest
from telethon.tl.types import StoryItem

from utils.scripts import command


@events.register(events.NewMessage(pattern=r'^\.story (.+)'))
async def story(event: events.NewMessage.Event):
    url = event.pattern_match.group(1)
    try:
        match = re.match(r"https://t.me/([^/]+)/s/(\d+)", url)
        if not match:
            await event.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –ü—Ä–∏–º–µ—Ä: https://t.me/channel_username/s/story_id")
            return

        channel_username = match.group(1)
        story_id = int(match.group(2))

        entity = await event.client.get_entity(channel_username)

        stories_result = await event.client(GetStoriesByIDRequest(
            peer=entity,
            id=[story_id]
        ))

        found_stories = stories_result.stories

        if not found_stories:
            await event.edit(f"‚ùå –°—Ç–æ—Ä–∏—Å —Å ID {story_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ @{channel_username}.")
            return

        target_story: StoryItem = found_stories[0]

        if target_story.media:
            await event.edit("üì• –°–∫–∞—á–∏–≤–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")

            downloaded_file = await event.client.download_media(
                target_story.media
            )

            await event.respond(file=downloaded_file)
        else:
            await event.edit("‚ùå –í —ç—Ç–æ–π —Å—Ç–æ—Ä–∏—Å –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞.")

    except Exception as e:
        await event.edit(f"üí• –û—à–∏–±–∫–∞: {e}")

handlers = [
    (story, command('info')),
]

modules_help['story'] = {
    'story [url]': '—Å–∫–∞—á–∞—Ç—å —Å—Ç–æ—Ä–∏—Å'
}
